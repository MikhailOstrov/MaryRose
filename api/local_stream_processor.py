import os
import time
import queue
import threading
import logging
import requests
from datetime import datetime
from uuid import uuid4
import webrtcvad
import numpy as np
from scipy.io.wavfile import write

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from config.config import (STREAM_SAMPLE_RATE, MEET_FRAME_DURATION_MS,
                           MEET_VAD_AGGRESSIVENESS, MEET_PAUSE_THRESHOLD_S, 
                           MEET_AUDIO_CHUNKS_DIR, SUMMARY_OUTPUT_DIR)
from handlers.stt_handler import transcribe_chunk
from handlers.ollama_handler import get_mary_response, get_summary_response
from handlers.diarization_handler import run_diarization, process_rttm_and_transcribe
from api.utils import combine_audio_chunks

logger = logging.getLogger(__name__)

class LocalStreamProcessor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ WebSocket.
    –õ–æ–≥–∏–∫–∞ VAD, STT –∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ MeetListenerBot –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    def __init__(self, meeting_id: str):
        self.meeting_id = meeting_id # ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        self.audio_queue = queue.Queue()
        self.is_running = threading.Event()
        self.is_running.set()
        self.vad = webrtcvad.Vad(MEET_VAD_AGGRESSIVENESS)
        self.summary_output_dir = SUMMARY_OUTPUT_DIR
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã VAD –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞
        self.frame_size = int(STREAM_SAMPLE_RATE * MEET_FRAME_DURATION_MS / 1000)
        self.silent_frames_threshold = int(MEET_PAUSE_THRESHOLD_S * 1000 / MEET_FRAME_DURATION_MS)

        # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤
        self.output_dir = MEET_AUDIO_CHUNKS_DIR / self.meeting_id
        os.makedirs(self.output_dir, exist_ok=True)
        logger.info(f"[{self.meeting_id}] –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: '{self.output_dir}'")
        
    def process_websocket_audio(self, audio_bytes: bytes):
        """
        ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ—Ç raw PCM –¥–∞–Ω–Ω—ã–µ –∏–∑ WebSocket (–∫–∞–∫ –≤ meet_listener)
        –∏ –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–∑–±–∏–≤–∞–µ—Ç –∏—Ö –Ω–∞ —Ñ—Ä–µ–π–º—ã –¥–ª—è VAD, –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ffmpeg.
        """
        try:
            if not self.is_running.is_set():
                return
                
            # ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º raw PCM bytes –Ω–∞–ø—Ä—è–º—É—é (16-bit signed, 16kHz, mono)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bytes –≤ numpy array –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            pcm_data = np.frombuffer(audio_bytes, dtype=np.int16)
            
            logger.debug(f"[{self.meeting_id}] –ü–æ–ª—É—á–µ–Ω raw PCM —á–∞–Ω–∫: {len(audio_bytes)} –±–∞–π—Ç ({len(pcm_data)} —Å–µ–º–ø–ª–æ–≤)")
            
            # ‚úÖ –†–∞–∑–±–∏–≤–∞–µ–º PCM –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ñ—Ä–µ–π–º—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ meet_listener
            frame_size = int(STREAM_SAMPLE_RATE * MEET_FRAME_DURATION_MS / 1000)
            for i in range(0, len(pcm_data), frame_size):
                frame = pcm_data[i:i + frame_size]
                if len(frame) == frame_size:  # –¢–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
                    # ‚úÖ –¢–æ—á–Ω–æ –∫–∞–∫ –≤ meet_listener: bytes(indata) -> audio_queue
                    self.audio_queue.put(frame.tobytes())
                
        except Exception as e:
            logger.error(f"[{self.meeting_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ raw PCM –¥–∞–Ω–Ω—ã—Ö: {e}")

    def _process_audio_stream(self):
        """
        üî• –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –∏–∑ MeetListenerBot - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ —Å VAD, STT –∏ wake-word detection.
        """
        threading.current_thread().name = f'VADProcessor-{self.meeting_id}'
        logger.info(f"[{self.meeting_id}] –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä VAD –∑–∞–ø—É—â–µ–Ω.")
        speech_buffer = []
        silent_frames_count = 0
        while self.is_running.is_set():
            try:
                audio_frame = self.audio_queue.get(timeout=1)
                is_speech = self.vad.is_speech(audio_frame, STREAM_SAMPLE_RATE)
                if is_speech:
                    speech_buffer.append(audio_frame)
                    silent_frames_count = 0
                else:
                    silent_frames_count += 1
                if speech_buffer and silent_frames_count > self.silent_frames_threshold:
                    full_speech_chunk_bytes = b''.join(speech_buffer)
                    speech_buffer.clear()
                    silent_frames_count = 0
                    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    threading.Thread(target=self._save_chunk, args=(full_speech_chunk_bytes,)).start()

                    # –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
                    transcription, trigger_word = transcribe_chunk(full_speech_chunk_bytes)
                    print(transcription)  # ‚úÖ –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å RunPod
                    if trigger_word == 1:
                        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–æ–≤–æ-—Ç—Ä–∏–≥–≥–µ—Ä")
                        response = get_mary_response(transcription)
                        print(response)  # ‚úÖ –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å RunPod

            except queue.Empty: 
                continue
            except Exception as e: 
                logger.error(f"[{self.meeting_id}] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ VAD: {e}")

    def _save_chunk(self, audio_bytes: bytes):
        """
        üî• –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –∏–∑ MeetListenerBot - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –Ω–∞ –¥–∏—Å–∫.
        """
        try:
            filename = f'chunk_{datetime.now().strftime("%Y%m%d_%H%M%S")}_{uuid4().hex[:6]}.wav'
            file_path = self.output_dir / filename
            audio_np = np.frombuffer(audio_bytes, dtype=np.int16)
            write(str(file_path), STREAM_SAMPLE_RATE, audio_np)
            logger.info(f"[{self.meeting_id}] üíæ –§—Ä–∞–≥–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(audio_np)/STREAM_SAMPLE_RATE:.2f} —Å–µ–∫)")
        except Exception as e: 
            logger.error(f"[{self.meeting_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {e}")

    def _perform_post_processing(self):
        """
        üî• –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –∏–∑ MeetListenerBot - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è.
        """
        threading.current_thread().name = f'PostProcessor-{self.meeting_id}'
        logger.info(f"[{self.meeting_id}] –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É...")

        try:
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤
            combined_audio_filename = f"combined_meeting_{self.meeting_id}.wav"
            combined_audio_filepath = self.output_dir / combined_audio_filename

            combine_audio_chunks(
                output_dir=self.output_dir,
                stream_sample_rate=STREAM_SAMPLE_RATE,
                meeting_id=self.meeting_id,
                output_filename=combined_audio_filename
            )
            
            if not os.path.exists(combined_audio_filepath):
                logger.error(f"[{self.meeting_id}] –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {combined_audio_filepath}")
                return
            
            # –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è
            logger.info(f"[{self.meeting_id}] –ó–∞–ø—É—Å–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...")
            rttm_path = run_diarization(str(combined_audio_filepath), str(self.output_dir))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ RTTM –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            logger.info(f"[{self.meeting_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è...")
            dialogue_transcript = process_rttm_and_transcribe(rttm_path, str(combined_audio_filepath))
            print(f"–≠—Ç–æ –≤—ã–≤–æ–¥ –¥–∏–∞–ª–æ–≥–∞: \n{dialogue_transcript}")

            # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            logger.info(f"[{self.meeting_id}] –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ...")
            summary_text = get_summary_response(dialogue_transcript)
            print(f"–≠—Ç–æ –≤—ã–≤–æ–¥ summary: \n{summary_text}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
            self._send_results_to_backend(dialogue_transcript, summary_text)
            
        except Exception as e:
            logger.error(f"[{self.meeting_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)
        finally:
            logger.info(f"[{self.meeting_id}] –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def _send_results_to_backend(self, full_text: str, summary: str):
        """
        üî• –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –∏–∑ MeetListenerBot - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Main Backend.
        """
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º meeting_id –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            meeting_id_int = int(self.meeting_id) if isinstance(self.meeting_id, str) else self.meeting_id
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            payload = {
                "meeting_id": meeting_id_int,
                "full_text": full_text,
                "summary": summary
            }
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                "X-Internal-Api-Key": "key",
                "Content-Type": "application/json"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            logger.info(f"[{self.meeting_id}] –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ backend...")
            response = requests.post(
                "http://35.246.252.4/meetings/internal/result",
                json=payload,
                headers=headers,
                timeout=30
            )
            
            response.raise_for_status()
            logger.info(f"[{self.meeting_id}] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ backend")
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ backend: {e}")
            logger.error(f"[{self.meeting_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è meeting_id –≤ —á–∏—Å–ª–æ: {e}")
            logger.error(f"[{self.meeting_id}] ‚ùå –û—à–∏–±–∫–∞ meeting_id: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            logger.error(f"[{self.meeting_id}] ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞).
        –í–º–µ—Å—Ç–æ sounddevice –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WebSocket –ø–æ—Ç–æ–∫.
        """
        threading.current_thread().name = f'LocalStreamBot-{self.meeting_id}'
        logger.info(f"[{self.meeting_id}] –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
            processor_thread = threading.Thread(target=self._process_audio_stream)
            processor_thread.start()
            
            logger.info(f"[{self.meeting_id}] üé§ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É WebSocket –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞...")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç MeetListenerBot, –∑–¥–µ—Å—å –Ω–µ—Ç sounddevice)
            processor_thread.join()
            
            logger.info(f"[{self.meeting_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        except Exception as e:
            logger.critical(f"[{self.meeting_id}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}", exc_info=True)
        finally:
            self.stop()
            logger.info(f"[{self.meeting_id}] –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É.
        """
        if not self.is_running.is_set():
            return
        
        logger.info(f"[{self.meeting_id}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")

        self.is_running.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        post_processing_thread = threading.Thread(target=self._perform_post_processing)
        post_processing_thread.daemon = False
        post_processing_thread.start()
        
        logger.info(f"[{self.meeting_id}] –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.") 