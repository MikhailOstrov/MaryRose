# .github/workflows/create-new-pod-from-branch.yml

name: Create New RunPod Pod via Branch Push

on:
  push:
    branches:
      - run-runpod

env:
  RUNPOD_TEMPLATE_ID: "ydgd23y2f5"
  DOCKER_IMAGE: "roma3213/maryrose-app:v3"
  DEFAULT_GPU_TYPE: "NVIDIA RTX A5000"

jobs:
  create-pod-and-update:
    name: Create Pod and Update Main VM
    runs-on: ubuntu-latest
    steps:
      - name: Install RunPodCTL and jq
        run: |
          curl -L https://github.com/runpod/runpodctl/releases/latest/download/runpodctl-linux-amd64 -o runpodctl
          sudo install -m 0755 runpodctl /usr/local/bin/runpodctl
          sudo apt-get update && sudo apt-get install -y jq

      - name: Terminate Existing Pods
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        run: |
          echo "Checking for existing pods to terminate..."
          POD_LIST=$(runpodctl get pod | tail -n +3 | sed '/^$/d')

          if [ -z "$POD_LIST" ]; then
            echo "No existing pods found. Proceeding to create a new one."
          else
            echo "Found existing pods. Removing them now..."
            POD_IDS=$(echo "$POD_LIST" | awk '{print $1}')
            
            for ID in $POD_IDS; do
              echo "Removing pod with ID: $ID"
              runpodctl remove pod $ID
            done
            
            echo "All existing pods have been scheduled for removal. Waiting 15 seconds..."
            sleep 10
          fi

      - name: Determine GPU Type
        id: get_gpu
        run: |
          GPU_FROM_COMMIT=$(git log -1 --pretty=%B | tail -n 1)
          if [[ "$GPU_FROM_COMMIT" == *"RTX"* ]] || [[ "$GPU_FROM_COMMIT" == *"A"* ]]; then
            echo "Found GPU in commit message: '$GPU_FROM_COMMIT'. Using it."
            echo "gpu_type=$GPU_FROM_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "No valid GPU type in commit message. Using default: '${{ env.DEFAULT_GPU_TYPE }}'"
            echo "gpu_type=${{ env.DEFAULT_GPU_TYPE }}" >> $GITHUB_OUTPUT
          fi

      - name: Create new pod and get its ID
        id: create_pod
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        run: |
          GPU_TO_CREATE="${{ steps.get_gpu.outputs.gpu_type }}"
          POD_NAME="ai-backend-$(date +%s)"
          echo "Attempting to create a new pod named '$POD_NAME' from template ${{ env.RUNPOD_TEMPLATE_ID }} with GPU: '$GPU_TO_CREATE'"

          CREATE_OUTPUT=$(runpodctl create pod \
            --templateId "${{ env.RUNPOD_TEMPLATE_ID }}" \
            --imageName "${{ env.DOCKER_IMAGE }}" \
            --gpuType "$GPU_TO_CREATE" \
            --name "$POD_NAME" \
            --volumePath "/workspace" \
            --volumeSize 50 \
            --containerDiskSize 50 \
            --secureCloud)
            
          echo "Response from RunPod: $CREATE_OUTPUT"

          POD_ID=$(echo "$CREATE_OUTPUT" | grep -o 'pod "[^"]*"' | sed 's/pod "//;s/"//')

          if [ -z "$POD_ID" ]; then
            echo "Fatal: Could not parse Pod ID from the creation output."
            exit 1
          fi

          echo "Found pod. New Pod ID: $POD_ID"
          echo "pod_id=$POD_ID" >> $GITHUB_OUTPUT

      # --- ИЗМЕНЕННЫЙ ШАГ ОЖИДАНИЯ С HEALTH CHECK ---
      - name: Wait for pod to become healthy
        id: wait_for_health
        run: |
          POD_ID=${{ steps.create_pod.outputs.pod_id }}
          HEALTH_URL="https://${POD_ID}-8001.proxy.runpod.net/health"

          echo "Waiting for application to become healthy at: $HEALTH_URL"

          # Ждем до 10 минут, пытаясь получить успешный ответ от /health
          for i in {1..40}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
            
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "Health check successful! Application is ready."
              AI_URL="https://$(echo $POD_ID)-8001.proxy.runpod.net"
              WEBSOCKET_URL="wss://$(echo $POD_ID)-8001.proxy.runpod.net/ws/listen/"
              echo "AI_BACKEND_URL=$AI_URL" >> $GITHUB_OUTPUT
              echo "AI_WEBSOCKET_URL=$WEBSOCKET_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "Health check failed with status code $HTTP_CODE. Waiting 15 seconds..."
            sleep 15
          done

          echo "Fatal: Application did not become healthy in time."
          exit 1

      - name: Update main VM with new URLs
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.MAIN_SERVICE_SSH_HOST }}
          username: ${{ secrets.MAIN_SERVICE_SSH_USER }}
          key: ${{ secrets.MAIN_SERVICE_SSH_PRIVATE_KEY }}
          script: |
            set -e
            NEW_AI_URL="${{ steps.wait_for_health.outputs.AI_BACKEND_URL }}"
            NEW_WS_URL="${{ steps.wait_for_health.outputs.AI_WEBSOCKET_URL }}"

            echo "New AI Backend URL: $NEW_AI_URL"
            echo "Updating .env file on the main VM..."

            sed -i "s|^AI_BACKEND_URL=.*|AI_BACKEND_URL=$NEW_AI_URL|" /home/jzndjxjcbd/mary-assistant/backend/.env
            sed -i "s|^AI_WEBSOCKET_URL=.*|AI_WEBSOCKET_URL=$NEW_WS_URL|" /home/jzndjxjcbd/mary-assistant/backend/.env

            sudo /home/jzndjxjcbd/restart-fastapi.sh
            echo "Main service restarted successfully."
