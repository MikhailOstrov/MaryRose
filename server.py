# server.py
import asyncio
import shutil
import logging
import threading
from fastapi import FastAPI, Depends, HTTPException, UploadFile, File, WebSocket, WebSocketDisconnect
from fastapi.security import APIKeyHeader
from pydantic import BaseModel

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config.config import UPLOADS_DIR
from api import utils
from handlers import diarization_handler, ollama_handler, stt_handler, tts_handler
from api.meet_listener import MeetListenerBot
from api.local_stream_processor import LocalStreamProcessor

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ---
app = FastAPI(title="AI Meeting Bot Server")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
active_bots = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
active_local_processors = {}

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: API –∫–ª—é—á ---
API_KEY = 'key' 
API_KEY_NAME = "X-Internal-Api-Key"
api_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)

async def get_api_key(api_key: str = Depends(api_key_header)):
    if api_key == API_KEY:
        return api_key
    else:
        logger.warning("Failed API Key validation")
        raise HTTPException(status_code=403, detail="Could not validate credentials")

async def verify_websocket_api_key(websocket: WebSocket):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç API –∫–ª—é—á –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    api_key = websocket.headers.get(API_KEY_NAME)
    if api_key != API_KEY:
        logger.warning(f"WebSocket: Failed API Key validation. Provided: {api_key}")
        await websocket.close(code=4001, reason="Invalid API Key")
        return False
    return True

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ ---
class StartRequest(BaseModel):
    meeting_id: str
    meet_url: str

class StopRequest(BaseModel):
    meeting_id: str

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∂–∏–≤."""
    return {"status": "ok", "message": "Server is running and models are loaded."}

@app.get("/status/{meeting_id}")
async def get_status(meeting_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø–æ ID."""
    if meeting_id in active_bots:
        return {"status": "active", "meeting_id": meeting_id}
    else:
        return {"status": "inactive", "meeting_id": meeting_id}

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –¥–ª—è Google Meet (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞) ---

def run_bot_thread(meeting_id: str, meet_url: str):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
    """
    #it working
    bot = None
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
        bot = MeetListenerBot(meeting_url=meet_url, meeting_id=meeting_id)
        active_bots[meeting_id] = bot
        bot.run() # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ/—Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –¥–ª—è {meeting_id}: {e}", exc_info=True)
    finally:
        if meeting_id in active_bots:
            del active_bots[meeting_id]
            logger.info(f"–ë–æ—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö.")

@app.post("/api/v1/internal/start-processing", dependencies=[Depends(get_api_key)])
async def start_processing(request: StartRequest):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è meeting_id: {request.meeting_id}")
    if request.meeting_id in active_bots:
        raise HTTPException(status_code=400, detail=f"–ë–æ—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {request.meeting_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=run_bot_thread, args=(request.meeting_id, request.meet_url))
    thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–º—Ä–µ—Ç
    thread.start()
    
    return {"status": "processing_started", "meeting_id": request.meeting_id}

@app.post("/api/v1/internal/stop-processing", dependencies=[Depends(get_api_key)])
async def stop_processing(request: StopRequest):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞ –¥–ª—è meeting_id: {request.meeting_id}")
    bot = active_bots.get(request.meeting_id)
    
    if not bot:
        raise HTTPException(status_code=404, detail=f"–ë–æ—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {request.meeting_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    try:
        bot.stop() # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        # active_bots[request.meeting_id] –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ø–æ—Ç–æ–∫–µ run_bot_thread
        return {"status": "stopping_initiated", "meeting_id": request.meeting_id}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {request.meeting_id}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞: {str(e)}")

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

@app.post("/api/v1/internal/process-file-offline", dependencies=[Depends(get_api_key)])
async def process_file_offline(file: UploadFile = File(...)):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª, –¥–∏–∞—Ä–∏–∑—É–µ—Ç, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –µ–≥–æ."""
    logger.info(f"Received file for offline processing: {file.filename}")
    
    upload_path = UPLOADS_DIR / file.filename
    with open(upload_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    
    try:
        wav_path = await asyncio.to_thread(utils.convert_to_standard_wav, upload_path)
        rttm_path = await asyncio.to_thread(diarization_handler.run_diarization, str(wav_path), str(UPLOADS_DIR))
        dialogue = await asyncio.to_thread(diarization_handler.process_rttm_and_transcribe, rttm_path, str(wav_path))
        summary = await asyncio.to_thread(ollama_handler.get_summary_response, dialogue)

        logger.info(f"Successfully processed file: {file.filename}")
        return {"status": "success", "full_transcript": dialogue, "summary": summary}
    except Exception as e:
        logger.error(f"Failed to process file {file.filename}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Failed to process file: {str(e)}")

# --- WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ ---

@app.websocket("/ws/process-local-audio/{meeting_id}")
async def process_local_audio_websocket(websocket: WebSocket, meeting_id: str):
    """
    WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LocalStreamProcessor –¥–ª—è VAD, STT –∏ wake-word detection.
    """
    processor = None
    processor_thread = None
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        if not await verify_websocket_api_key(websocket):
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if meeting_id in active_local_processors:
            logger.warning(f"WebSocket: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
            await websocket.close(code=4002, reason="Processor already exists")
            return
        
        # 3. –ü—Ä–∏–Ω–∏–º–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await websocket.accept()
        logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
        
        # 4. –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º LocalStreamProcessor
        processor = LocalStreamProcessor(meeting_id)
        active_local_processors[meeting_id] = processor
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        processor_thread = threading.Thread(target=processor.run)
        processor_thread.daemon = True
        processor_thread.start()
        
        logger.info(f"üé§ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
        
        # 5. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç Main Backend
                audio_data = await websocket.receive_bytes()
                logger.debug(f"üì§ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}: {len(audio_data)} –±–∞–π—Ç")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processor.process_websocket_audio(audio_data)
                
            except WebSocketDisconnect:
                logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–∏–ª—Å—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}: {e}")
                break
                
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ WebSocket –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}: {e}", exc_info=True)
        try:
            await websocket.close(code=4500, reason="Internal server error")
        except:
            pass
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        try:
            if processor:
                logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
                processor.stop()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
            if meeting_id in active_local_processors:
                del active_local_processors[meeting_id]
                logger.info(f"üóëÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ---
# uvicorn server:app --host 0.0.0.0 --port 8001