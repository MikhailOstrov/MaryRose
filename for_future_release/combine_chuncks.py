'''
import glob
import os
import logging
import soundfile as sf
import numpy as np

logger = logging.getLogger(__name__)

def combine_audio_chunks(output_dir, stream_sample_rate, meeting_id, output_filename, pattern="chunk_*.wav"):

    output_filepath = output_dir / output_filename
    all_chunks = sorted(glob.glob(os.path.join(output_dir, "*.wav")))
    full_audio = []

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...")

    data, rate = sf.read(all_chunks[0], dtype='float32')
    full_audio.append(data)
    for chunk in all_chunks[1:]:
        data, _ = sf.read(chunk, dtype='float32')
        full_audio.append(data)

    combined_audio = np.concatenate(full_audio)

    sf.write(output_filepath, combined_audio, stream_sample_rate)
    logger.info(f"[{meeting_id}] –í—Å–µ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤: '{output_filepath}'")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—á–∞–Ω–∫–æ–≤
    def _save_chunk(self, audio_np):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ-—á–∞–Ω–∫ –≤ —Ñ–∞–π–ª WAV."""
        if audio_np.size == 0:
            return
        filename = f'chunk_{datetime.now().strftime("%Y%m%d_%H%M%S")}_{uuid4().hex[:6]}.wav'
        file_path = self.output_dir / filename
        try:
            sf.write(file_path, audio_np, STREAM_SAMPLE_RATE)
            logger.info(f"üíæ –§—Ä–∞–≥–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(audio_np)/STREAM_SAMPLE_RATE:.2f} —Å–µ–∫)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {e}")
'''