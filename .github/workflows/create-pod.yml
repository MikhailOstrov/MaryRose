# .github/workflows/create-new-pod-from-branch.yml

name: Create New RunPod Pod via Branch Push

on:
  push:
    branches:
      - run-runpod

env:
  RUNPOD_TEMPLATE_ID: "ydgd23y2f5"
  DOCKER_IMAGE: "roma3213/maryrose-app:v3"
  DEFAULT_GPU_TYPE: "NVIDIA RTX A5000"

jobs:
  create-pod-and-update:
    name: Create Pod and Update Main VM
    runs-on: ubuntu-latest
    steps:
      - name: Install RunPodCTL and jq
        run: |
          curl -L https://github.com/runpod/runpodctl/releases/latest/download/runpodctl-linux-amd64 -o runpodctl
          sudo install -m 0755 runpodctl /usr/local/bin/runpodctl
          sudo apt-get update && sudo apt-get install -y jq

      - name: Determine GPU Type
        id: get_gpu
        run: |
          GPU_FROM_COMMIT=$(git log -1 --pretty=%B | tail -n 1)
          if [[ "$GPU_FROM_COMMIT" == *"RTX"* ]] || [[ "$GPU_FROM_COMMIT" == *"A"* ]]; then
            echo "Found GPU in commit message: '$GPU_FROM_COMMIT'. Using it."
            echo "gpu_type=$GPU_FROM_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "No valid GPU type in commit message. Using default: '${{ env.DEFAULT_GPU_TYPE }}'"
            echo "gpu_type=${{ env.DEFAULT_GPU_TYPE }}" >> $GITHUB_OUTPUT
          fi

      - name: Create new pod and get its ID
        id: create_pod
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        run: |
          GPU_TO_CREATE="${{ steps.get_gpu.outputs.gpu_type }}"
          POD_NAME="ai-backend-$(date +%s)"
          echo "Attempting to create a new pod named '$POD_NAME' from template ${{ env.RUNPOD_TEMPLATE_ID }} with GPU: '$GPU_TO_CREATE'"

          CREATE_OUTPUT=$(runpodctl create pod \
            --templateId "${{ env.RUNPOD_TEMPLATE_ID }}" \
            --imageName "${{ env.DOCKER_IMAGE }}" \
            --gpuType "$GPU_TO_CREATE" \
            --name "$POD_NAME" \
            --secureCloud)
            
          echo "Response from RunPod: $CREATE_OUTPUT"

          POD_ID=$(echo "$CREATE_OUTPUT" | grep -o 'pod "[^"]*"' | sed 's/pod "//;s/"//')

          if [ -z "$POD_ID" ]; then
            echo "Fatal: Could not parse Pod ID from the creation output."
            exit 1
          fi

          echo "Found pod. New Pod ID: $POD_ID"
          echo "pod_id=$POD_ID" >> $GITHUB_OUTPUT

      - name: Wait for pod to run and get URLs
        id: get_url
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        run: |
          POD_ID=${{ steps.create_pod.outputs.pod_id }}
          echo "Waiting for pod $POD_ID to enter 'Running' state..."

          for i in {1..20}; do
            # --- ИСПРАВЛЕНИЕ: УБИРАЕМ --json ---
            POD_INFO=$(runpodctl get pod $POD_ID)
            STATUS=$(echo "$POD_INFO" | jq -r '.desiredStatus')
            if [ "$STATUS" == "Running" ]; then
              echo "Pod is running!"
              AI_URL=$(echo "$POD_INFO" | jq -r '.runtime.ports[] | select(.privatePort == 8001) | .httpsUrl')
              WEBSOCKET_URL=$(echo "$AI_URL" | sed 's|https|wss|')/ws/listen/
              echo "AI_BACKEND_URL=$AI_URL" >> $GITHUB_OUTPUT
              echo "AI_WEBSOCKET_URL=$WEBSOCKET_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
            if [ "$STATUS" == "Terminated" ] || [ "$STATUS" == "Failed" ]; then
              echo "Error: Pod entered '$STATUS' state. Aborting."
              exit 1
            fi
            echo "Current status: $STATUS. Waiting 15 seconds..."; sleep 15
          done

          echo "Fatal: Pod did not become ready in time."
          exit 1

      - name: Update main VM with new URLs
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.MAIN_SERVICE_SSH_HOST }}
          username: ${{ secrets.MAIN_SERVICE_SSH_USER }}
          key: ${{ secrets.MAIN_SERVICE_SSH_PRIVATE_KEY }}
          script: |
            set -e
            NEW_AI_URL="${{ steps.get_url.outputs.AI_BACKEND_URL }}"
            NEW_WS_URL="${{ steps.get_url.outputs.AI_WEBSOCKET_URL }}"

            sed -i "s|^AI_BACKEND_URL=.*|AI_BACKEND_URL=$NEW_AI_URL|" /home/jzndjxjcbd/mary-assistant/backend/.env
            sed -i "s|^AI_WEBSOCKET_URL=.*|AI_WEBSOCKET_URL=$NEW_WS_URL|" /home/jzndjxjcbd/mary-assistant/backend/.env

            sudo /home/jzndjxjcbd/restart-fastapi.sh
            echo "Main service restarted successfully."
